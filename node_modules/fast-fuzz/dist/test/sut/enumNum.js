"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Enum_Num = exports.Direction_Auto = exports.Direction_Default = void 0;
const fast_fuzz_1 = require("../../src/fast-fuzz");
const literals = {
    nil: 0,
    m1: -1,
    emptyStr: '',
    longStr: 'RkeRxOSF4BfSpgc5Dc7hGumMO',
    n1: 1,
    n2: 2,
    n3: 3,
    n4: 4
};
var Direction_Default;
(function (Direction_Default) {
    Direction_Default[Direction_Default["Up"] = 0] = "Up";
    Direction_Default[Direction_Default["Down"] = 1] = "Down";
    Direction_Default[Direction_Default["Left"] = 2] = "Left";
    Direction_Default[Direction_Default["Right"] = 3] = "Right";
})(Direction_Default = exports.Direction_Default || (exports.Direction_Default = {}));
var Direction_Auto;
(function (Direction_Auto) {
    Direction_Auto[Direction_Auto["Up"] = 1] = "Up";
    Direction_Auto[Direction_Auto["Down"] = 2] = "Down";
    Direction_Auto[Direction_Auto["Left"] = 3] = "Left";
    Direction_Auto[Direction_Auto["Right"] = 4] = "Right";
})(Direction_Auto = exports.Direction_Auto || (exports.Direction_Auto = {}));
class Enum_Num {
    static enum_num_default(arg) {
        if (arg === undefined) {
            return `Undefined: ${arg}`;
        }
        else if (arg === null) {
            return `Null: ${arg}`;
        }
        else if (Number.isNaN(arg)) {
            return `NaN: ${arg}`;
        }
        else if (arg === 0) {
            return `Zero: ${arg}`;
        }
        else if (arg === Number.MIN_SAFE_INTEGER) {
            return `Min int: ${arg}`;
        }
        else if (arg === Number.MAX_SAFE_INTEGER) {
            return `Max int: ${arg}`;
        }
        else if (arg === literals.m1 * Number.MIN_VALUE) {
            return `Negative min decimal: ${arg}`;
        }
        else if (arg === Number.MIN_VALUE) {
            return `Positive min decimal: ${arg}`;
        }
        else if (arg === literals.m1 * Number.MAX_VALUE) {
            return `Min float: ${arg}`;
        }
        else if (arg === Number.MAX_VALUE) {
            return `Max float: ${arg}`;
        }
        else if (arg === Number.NEGATIVE_INFINITY) {
            return `Negative infinity: ${arg}`;
        }
        else if (arg === Number.POSITIVE_INFINITY) {
            return `Positive infinity: ${arg}`;
        }
        else if (`${arg}` === literals.emptyStr) {
            return `Empty string: ${arg}`;
        }
        else if (`${arg}` === literals.longStr) {
            return `Long literal(25): ${arg}`;
        }
        else if (arg === literals.n1) {
            return `Direction.Down: ${arg}`;
        }
        else if (arg === literals.n2) {
            return `Direction.Left: ${arg}`;
        }
        else if (arg === literals.n3) {
            return `Direction.Right: ${arg}`;
        }
        else {
            return `Unkown: ${arg}`;
        }
    }
    static enum_num_auto(arg) {
        if (arg === undefined) {
            return `Undefined: ${arg}`;
        }
        else if (arg === null) {
            return `Null: ${arg}`;
        }
        else if (Number.isNaN(arg)) {
            return `NaN: ${arg}`;
        }
        else if (arg === literals.nil) {
            return `Zero: ${arg}`;
        }
        else if (arg === Number.MIN_SAFE_INTEGER) {
            return `Min int: ${arg}`;
        }
        else if (arg === Number.MAX_SAFE_INTEGER) {
            return `Max int: ${arg}`;
        }
        else if (arg === literals.m1 * Number.MIN_VALUE) {
            return `Negative min decimal: ${arg}`;
        }
        else if (arg === Number.MIN_VALUE) {
            return `Positive min decimal: ${arg}`;
        }
        else if (arg === literals.m1 * Number.MAX_VALUE) {
            return `Min float: ${arg}`;
        }
        else if (arg === Number.MAX_VALUE) {
            return `Max float: ${arg}`;
        }
        else if (arg === Number.NEGATIVE_INFINITY) {
            return `Negative infinity: ${arg}`;
        }
        else if (arg === Number.POSITIVE_INFINITY) {
            return `Positive infinity: ${arg}`;
        }
        else if (`${arg}` === literals.emptyStr) {
            return `Empty string: ${arg}`;
        }
        else if (`${arg}` === literals.longStr) {
            return `Long literal(25): ${arg}`;
        }
        else if (arg === literals.n1) {
            return `Direction.Up: ${arg}`;
        }
        else if (arg === literals.n2) {
            return `Direction.Down: ${arg}`;
        }
        else if (arg === literals.n3) {
            return `Direction.Left: ${arg}`;
        }
        else if (arg === literals.n4) {
            return `Direction.Right: ${arg}`;
        }
        else {
            return `Unkown: ${arg}`;
        }
    }
}
__decorate([
    fast_fuzz_1.fuzzMethod,
    __param(0, (0, fast_fuzz_1.fuzzArgType)('Direction_Default')),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Number]),
    __metadata("design:returntype", String)
], Enum_Num, "enum_num_default", null);
__decorate([
    fast_fuzz_1.fuzzMethod,
    __param(0, (0, fast_fuzz_1.fuzzArgType)('Direction_Auto')),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Number]),
    __metadata("design:returntype", String)
], Enum_Num, "enum_num_auto", null);
exports.Enum_Num = Enum_Num;
