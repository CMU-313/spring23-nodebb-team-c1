"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.workerInit = exports.Call = void 0;
const multee_1 = __importDefault(require("multee"));
const fast_safe_stringify_1 = __importDefault(require("fast-safe-stringify"));
const fuzz_1 = require("./fuzz");
const multee = (0, multee_1.default)('worker');
const job = multee.createHandler('job', (callArgs) => __awaiter(void 0, void 0, void 0, function* () {
    switch (callArgs.name) {
        case Call.init:
            if (!('toJSON' in Error.prototype)) {
                Object.defineProperty(Error.prototype, 'toJSON', {
                    value: function () {
                        const alt = {};
                        alt['name'] = this.name;
                        Object.getOwnPropertyNames(this).forEach((key) => {
                            alt[key] = this[key];
                        }, this);
                        return alt;
                    },
                    configurable: true,
                    writable: true
                });
            }
            return yield (0, fuzz_1.init)(callArgs.args[0], callArgs.args[1], callArgs.args[2], callArgs.args[3]);
        case Call.count:
            return yield (0, fuzz_1.count)(callArgs.args[0], callArgs.args[1], callArgs.args[2]);
        case Call.fuzz:
            return (0, fast_safe_stringify_1.default)(yield (0, fuzz_1.fuzz)(callArgs.args[0], callArgs.args[1], callArgs.args[2], callArgs.args[3], callArgs.args[4], callArgs.args[5], callArgs.args[6]));
        case Call.getInstances:
            return (0, fast_safe_stringify_1.default)(yield (0, fuzz_1.getInstances)());
    }
}));
var Call;
(function (Call) {
    Call[Call["init"] = 0] = "init";
    Call[Call["count"] = 1] = "count";
    Call[Call["fuzz"] = 2] = "fuzz";
    Call[Call["getInstances"] = 3] = "getInstances";
})(Call = exports.Call || (exports.Call = {}));
const workerInit = () => {
    const worker = multee.start(__filename);
    return {
        run: job(worker),
        worker: worker
    };
};
exports.workerInit = workerInit;
