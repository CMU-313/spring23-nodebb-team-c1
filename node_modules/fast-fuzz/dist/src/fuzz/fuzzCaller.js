"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.fuzz = void 0;
const fs_1 = __importDefault(require("fs"));
const path_1 = __importDefault(require("path"));
const os_1 = __importDefault(require("os"));
const log_update_1 = __importDefault(require("log-update"));
const fast_safe_stringify_1 = __importDefault(require("fast-safe-stringify"));
const fuzz_1 = require("./fuzz");
const fuzzRunner_1 = require("./fuzzRunner");
let instancesPath;
let fuzzRunner;
function init(folder, threads, src, dist) {
    return __awaiter(this, void 0, void 0, function* () {
        let instances;
        instancesPath = path_1.default.join(folder, '/fuzzInstances.json');
        if (fs_1.default.existsSync(instancesPath)) {
            instances = JSON.parse(fs_1.default.readFileSync(instancesPath, 'utf8'));
        }
        if (threads === 0) {
            yield (0, fuzz_1.init)(folder, src, dist, instances);
        }
        else {
            fuzzRunner = new fuzzRunner_1.FuzzRunner();
            yield fuzzRunner.init(folder, src, dist, instances, threads);
        }
    });
}
function fuzz(folder, threads, maxTime = 1e4, methodPattern, classPattern, filePattern, src, dist, verbose = false, force = false, resultsOut = []) {
    return __awaiter(this, void 0, void 0, function* () {
        yield init(folder, threads, src, dist);
        console.clear();
        if (verbose) {
            let methodCount;
            if (threads === 0) {
                methodCount = yield (0, fuzz_1.count)(methodPattern, classPattern, filePattern);
            }
            else {
                methodCount = yield fuzzRunner.count(methodPattern, classPattern, filePattern);
            }
            let threadsOut = threads === undefined ? os_1.default.cpus().length : threads;
            threadsOut = threadsOut === 0 ? 1 : threadsOut;
            threadsOut = Math.min(threadsOut, methodCount);
            (0, log_update_1.default)(`
      Method count: ${methodCount},
      Estimated time (s): ${(methodCount * maxTime / 1000) / threadsOut}
    `);
            log_update_1.default.done();
        }
        let instances;
        if (threads === 0) {
            yield (0, fuzz_1.fuzz)(maxTime, methodPattern, classPattern, filePattern, resultsOut);
            instances = yield (0, fuzz_1.getInstances)();
        }
        else {
            yield fuzzRunner.fuzz(maxTime, methodPattern, classPattern, filePattern, resultsOut);
            instances = yield fuzzRunner.getInstances();
        }
        if (threads !== 0) {
            fuzzRunner.terminate();
        }
        saveInstances({ force, instances });
        return resultsOut;
    });
}
exports.fuzz = fuzz;
function saveInstances({ force, instances }) {
    if (!force && fs_1.default.existsSync(instancesPath)) {
        return;
    }
    const output = (0, fast_safe_stringify_1.default)(instances);
    fs_1.default.writeFileSync(instancesPath, output);
}
