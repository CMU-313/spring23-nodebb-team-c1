"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.FuzzWorker = void 0;
const worker_1 = require("./worker");
class FuzzWorker {
    constructor() {
        this.worker = (0, worker_1.workerInit)();
    }
    init(folder, src, dist, instances) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.worker.run({
                name: worker_1.Call.init,
                args: [folder, src, dist, instances]
            });
        });
    }
    count(methodPattern, classPattern, filePattern) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.worker.run({
                name: worker_1.Call.count,
                args: [
                    methodPattern,
                    classPattern,
                    filePattern
                ]
            });
        });
    }
    fuzz(maxTime = 1e4, methodPattern, classPattern, filePattern, resultsOut = [], index = 0, count = 0) {
        return __awaiter(this, void 0, void 0, function* () {
            const result = JSON.parse(yield this.worker.run({
                name: worker_1.Call.fuzz,
                args: [
                    maxTime,
                    methodPattern,
                    classPattern,
                    filePattern,
                    undefined,
                    index,
                    count
                ]
            }));
            resultsOut.push(...result);
            return resultsOut;
        });
    }
    getInstances() {
        return __awaiter(this, void 0, void 0, function* () {
            return JSON.parse(yield this.worker.run({
                name: worker_1.Call.getInstances,
                args: []
            }));
        });
    }
    terminate() {
        this.worker.worker.terminate();
    }
}
exports.FuzzWorker = FuzzWorker;
