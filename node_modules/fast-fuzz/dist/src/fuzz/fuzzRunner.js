"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.FuzzRunner = void 0;
const os_1 = __importDefault(require("os"));
const await_lock_1 = __importDefault(require("await-lock"));
const flat_promise_1 = __importDefault(require("flat-promise"));
const globals_1 = require("../utils/globals");
const fuzzWorker_1 = require("./fuzzWorker");
class FuzzRunner {
    constructor() {
        this.lock = new await_lock_1.default();
        this.workers = [];
    }
    init(folder, src, dist, instances, pCount) {
        return __awaiter(this, void 0, void 0, function* () {
            if (pCount === undefined) {
                this.pCount = os_1.default.cpus().length;
            }
            else {
                this.pCount = pCount;
            }
            const finalPromise = new flat_promise_1.default();
            let workersCount = 0;
            const initWorker = () => __awaiter(this, void 0, void 0, function* () {
                const worker = new fuzzWorker_1.FuzzWorker();
                this.workers.push(worker);
                yield worker.init(folder, src, dist, instances);
                yield this.lock.acquireAsync();
                try {
                    workersCount++;
                }
                finally {
                    this.lock.release();
                }
                if (workersCount === this.pCount) {
                    finalPromise.resolve();
                }
            });
            for (let index = 0; index < this.pCount; index++) {
                initWorker();
            }
            yield finalPromise.promise;
        });
    }
    count(methodPattern, classPattern, filePattern) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.workers[0].count(methodPattern, classPattern, filePattern);
        });
    }
    fuzz(maxTime = 1e4, methodPattern, classPattern, filePattern, resultsOut = []) {
        return __awaiter(this, void 0, void 0, function* () {
            const count = yield this.count(methodPattern, classPattern, filePattern);
            const pCount = Math.min(count, this.pCount);
            const finalPromise = new flat_promise_1.default();
            this.methodIndexPre = -1;
            this.methodIndexPost = -1;
            for (let index = 0; index < pCount; index++) {
                this.runWorker(this.workers[index], finalPromise, maxTime, methodPattern, classPattern, filePattern, resultsOut, count);
            }
            yield finalPromise.promise;
            return resultsOut;
        });
    }
    getInstances() {
        return __awaiter(this, void 0, void 0, function* () {
            globals_1.Globals.instances = {};
            for (const worker of this.workers) {
                const instances = yield worker.getInstances();
                Object.entries(instances).forEach(([file, typeInstances]) => {
                    if (globals_1.Globals.instances[file] === undefined) {
                        globals_1.Globals.instances[file] = {};
                    }
                    Object.entries(typeInstances)
                        .forEach(([type, instances]) => {
                        if (globals_1.Globals.instances[file][type] === undefined) {
                            globals_1.Globals.instances[file][type] = {
                                instances: []
                            };
                        }
                        globals_1.Globals.instances[file][type].instances.push(...instances.instances);
                    });
                });
            }
            return globals_1.Globals.instances;
        });
    }
    terminate() {
        let worker;
        while ((worker = this.workers.pop()) !== undefined) {
            worker.terminate();
        }
    }
    runWorker(worker, finalPromise, maxTime, methodPattern, classPattern, filePattern, resultsOut, count) {
        return __awaiter(this, void 0, void 0, function* () {
            do {
                let resultsP;
                yield this.lock.acquireAsync();
                try {
                    this.methodIndexPre++;
                    resultsP = worker.fuzz(maxTime, methodPattern, classPattern, filePattern, resultsOut, this.methodIndexPre, 1);
                }
                finally {
                    this.lock.release();
                }
                yield resultsP;
                yield this.lock.acquireAsync();
                try {
                    this.methodIndexPost++;
                }
                finally {
                    this.lock.release();
                }
            } while (this.methodIndexPre < count - 1);
            if (this.methodIndexPost === count - 1) {
                finalPromise.resolve();
            }
        });
    }
}
exports.FuzzRunner = FuzzRunner;
