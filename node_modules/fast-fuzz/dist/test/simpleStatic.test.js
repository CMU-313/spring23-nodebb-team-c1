"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const chai_1 = require("chai");
const testRunner_1 = require("./testRunner");
describe('Simple static methods.', function () {
    this.timeout(3 * 60 * 1e3);
    before(() => __awaiter(this, void 0, void 0, function* () {
        global.fastFuzzResults = yield (0, testRunner_1.init)('Simple');
    }));
    it('Fuzz simple method static', () => __awaiter(this, void 0, void 0, function* () {
        const results = global.fastFuzzResults;
        const method = results.find((result) => result.name === 'simple_static_simple');
        (0, chai_1.expect)(method).to.not.equal(undefined);
        (0, chai_1.expect)(method.results.length).to.equal(3);
    }));
    it('Fuzz regular method static', () => __awaiter(this, void 0, void 0, function* () {
        const results = global.fastFuzzResults;
        const method = results.find((result) => result.name === 'simple_static_regular');
        (0, chai_1.expect)(method).to.not.equal(undefined);
        (0, chai_1.expect)(method.results.length).to.equal(6);
    }));
    it('Fuzz async interface static', () => __awaiter(this, void 0, void 0, function* () {
        const results = global.fastFuzzResults;
        const method = results.find((result) => result.name === 'simple_static_IAsync');
        (0, chai_1.expect)(method).to.not.equal(undefined);
        (0, chai_1.expect)(method.results.length).to.equal(6);
    }));
    it('Fuzz async method static', () => __awaiter(this, void 0, void 0, function* () {
        const results = global.fastFuzzResults;
        const method = results.find((result) => result.name === 'simple_static_async');
        (0, chai_1.expect)(method).to.not.equal(undefined);
        (0, chai_1.expect)(method.results.length).to.equal(6);
    }));
    it('Fuzz simple method with error', () => __awaiter(this, void 0, void 0, function* () {
        const results = global.fastFuzzResults;
        const method = results.find((result) => result.name === 'simple_static_error');
        (0, chai_1.expect)(method).to.not.equal(undefined);
        (0, chai_1.expect)(method.results.length).to.equal(3);
    }));
    it('Fuzz simple async method with error', () => __awaiter(this, void 0, void 0, function* () {
        const results = global.fastFuzzResults;
        const method = results.find((result) => result.name === 'simple_static_error_async');
        (0, chai_1.expect)(method).to.not.equal(undefined);
        (0, chai_1.expect)(method.results.length).to.equal(3);
    }));
});
