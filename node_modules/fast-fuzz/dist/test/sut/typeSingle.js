"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Type_Single = void 0;
const fast_fuzz_1 = require("../../src/fast-fuzz");
const typeReference_1 = require("./typeReference");
class Type_Single {
    static type_single_simple(argInstance) {
        if (argInstance === undefined) {
            return `Undefined: ${argInstance}`;
        }
        else if (argInstance === null) {
            return `Null: ${argInstance}`;
        }
        else if (Object.values(argInstance).length === 0) {
            return `Empty object {}: ${JSON.stringify(argInstance)}`;
        }
        const arg = argInstance.getValue();
        if (arg[3] !== typeReference_1.Reference_Derived.name) {
            return `Wrong type: ${arg[3]}`;
        }
        switch (arg[1]) {
            case 22:
                return `Branch 1: ${JSON.stringify(arg)}`;
            case 17:
                return `Branch 2: ${JSON.stringify(arg)}`;
            default:
                break;
        }
        return `Branch 0: ${JSON.stringify(arg)}`;
    }
    static type_single_array(argArray) {
        if (argArray === undefined) {
            return `Undefined []: ${JSON.stringify(argArray)}`;
        }
        else if (argArray === null) {
            return `Null []: ${JSON.stringify(argArray)}`;
        }
        else if (argArray.length === 0) {
            return `Empty []: ${JSON.stringify(argArray)}`;
        }
        const argInstance = argArray[0];
        if (argInstance === undefined) {
            return `Undefined: ${argInstance}`;
        }
        else if (argInstance === null) {
            return `Null: ${argInstance}`;
        }
        else if (Object.values(argInstance).length === 0) {
            return `Empty object {}: ${JSON.stringify(argInstance)}`;
        }
        const arg = argInstance.getValue();
        switch (arg[1]) {
            case 22:
                return `Branch 1: ${JSON.stringify(arg)}`;
            case 17:
                return `Branch 2: ${JSON.stringify(arg)}`;
            default:
                break;
        }
        return `Branch 0: ${JSON.stringify(arg)}`;
    }
    static type_single_regular(argInstance) {
        if (argInstance === undefined) {
            return `Undefined: ${argInstance}`;
        }
        else if (argInstance === null) {
            return `Null: ${argInstance}`;
        }
        const arg = argInstance.getValue();
        if (arg[2] == 7) {
            if (arg[0] == 'Bob') {
                return `Branch 1: ${JSON.stringify(arg)}`;
            }
        }
        else if (arg[2] == 10) {
            if (arg[1] == 22 && arg[0] == 'Alice') {
                return `Branch 2: ${JSON.stringify(arg)}`;
            }
        }
        return `Branch 0: ${JSON.stringify(arg)}`;
    }
}
__decorate([
    fast_fuzz_1.fuzzMethod,
    __param(0, (0, fast_fuzz_1.fuzzArgType)(typeReference_1.Reference_Derived.name)),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [typeReference_1.Reference_Derived]),
    __metadata("design:returntype", String)
], Type_Single, "type_single_simple", null);
__decorate([
    fast_fuzz_1.fuzzMethod,
    __param(0, (0, fast_fuzz_1.fuzzArgType)(typeReference_1.Reference_Derived.name, 1)),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Array]),
    __metadata("design:returntype", String)
], Type_Single, "type_single_array", null);
__decorate([
    fast_fuzz_1.fuzzMethod,
    __param(0, (0, fast_fuzz_1.fuzzArgType)(typeReference_1.Reference_Derived.name)),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [typeReference_1.Reference_Derived]),
    __metadata("design:returntype", String)
], Type_Single, "type_single_regular", null);
exports.Type_Single = Type_Single;
