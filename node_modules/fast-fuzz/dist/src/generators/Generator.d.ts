import { BuiltIn } from "../utils/decorators";
import { Limits } from "../utils/limits";
import { ModuleType } from "../utils/modules";
import { IGenerator } from "./IGenerator";
import { Mode } from "./Mode";
export declare abstract class Generator implements IGenerator {
    static mode: Mode;
    static P_FALSY: number;
    static P_STUFF: number;
    static DEFAULT_FALSY: any[];
    index: number;
    dimension: number;
    literals?: (number | Date | string)[];
    limits: Limits;
    batchSize: number;
    values: any[];
    count: number;
    protected falsyLiterals: any[];
    constructor(dimension: number, limits: Limits, literals?: (number | Date | string)[], index?: number);
    abstract next(): any;
    abstract generate(count: number): any[];
    protected static getLiterals(type: BuiltIn, literals: string[]): (number | Date | string)[];
    protected static generate(generator: Generator, count: number): void;
    protected static next(generator: Generator): {
        count: number;
        result: any;
    };
    static getRandomIndex(max: number): number;
    static getRandomInt(min: number, max: number): number;
    protected static getType(type: ModuleType): any;
    private static reset;
}
